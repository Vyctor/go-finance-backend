// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bills.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createBill = `-- name: CreateBill :one
INSERT INTO bills (user_id, category_id, title, type, description, amount, date)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id
`

type CreateBillParams struct {
	UserID      int32     `json:"user_id"`
	CategoryID  int32     `json:"category_id"`
	Title       string    `json:"title"`
	Type        string    `json:"type"`
	Description string    `json:"description"`
	Amount      string    `json:"amount"`
	Date        time.Time `json:"date"`
}

func (q *Queries) CreateBill(ctx context.Context, arg CreateBillParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, createBill,
		arg.UserID,
		arg.CategoryID,
		arg.Title,
		arg.Type,
		arg.Description,
		arg.Amount,
		arg.Date,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}

const deleteBill = `-- name: DeleteBill :exec
DELETE
FROM bills
WHERE id = $1
`

func (q *Queries) DeleteBill(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteBill, id)
	return err
}

const getBill = `-- name: GetBill :one
SELECT id, user_id, category_id, title, type, description, amount, date, created_at, updated_at
FROM bills
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetBill(ctx context.Context, id int32) (Bill, error) {
	row := q.db.QueryRowContext(ctx, getBill, id)
	var i Bill
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.CategoryID,
		&i.Title,
		&i.Type,
		&i.Description,
		&i.Amount,
		&i.Date,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getBills = `-- name: GetBills :many
SELECT b.id, b.user_id, b.category_id, b.title, b.type, b.description, b.amount, b.date, b.created_at, b.updated_at, c.title as category_title
FROM bills b
         LEFT JOIN categories c ON c.id = b.category_id
WHERE b.user_id = $1
  and b.type = $2
  and b.title like $3
  and b.description like $4
  and b.category_id = $5
  and b.date = $6
ORDER BY date DESC
`

type GetBillsParams struct {
	UserID      int32     `json:"user_id"`
	Type        string    `json:"type"`
	Title       string    `json:"title"`
	Description string    `json:"description"`
	CategoryID  int32     `json:"category_id"`
	Date        time.Time `json:"date"`
}

type GetBillsRow struct {
	ID            int32          `json:"id"`
	UserID        int32          `json:"user_id"`
	CategoryID    int32          `json:"category_id"`
	Title         string         `json:"title"`
	Type          string         `json:"type"`
	Description   string         `json:"description"`
	Amount        string         `json:"amount"`
	Date          time.Time      `json:"date"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	CategoryTitle sql.NullString `json:"category_title"`
}

func (q *Queries) GetBills(ctx context.Context, arg GetBillsParams) ([]GetBillsRow, error) {
	rows, err := q.db.QueryContext(ctx, getBills,
		arg.UserID,
		arg.Type,
		arg.Title,
		arg.Description,
		arg.CategoryID,
		arg.Date,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetBillsRow
	for rows.Next() {
		var i GetBillsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.CategoryID,
			&i.Title,
			&i.Type,
			&i.Description,
			&i.Amount,
			&i.Date,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CategoryTitle,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBillsGraph = `-- name: GetBillsGraph :one
SELECT COUNT(*)
FROM bills
where user_id = $1
  and type = $2
`

type GetBillsGraphParams struct {
	UserID int32  `json:"user_id"`
	Type   string `json:"type"`
}

func (q *Queries) GetBillsGraph(ctx context.Context, arg GetBillsGraphParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBillsGraph, arg.UserID, arg.Type)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getBillsReports = `-- name: GetBillsReports :one
SELECT SUM(value) AS sum_value
FROM bills
where user_id = $1
  and type = $2
`

type GetBillsReportsParams struct {
	UserID int32  `json:"user_id"`
	Type   string `json:"type"`
}

func (q *Queries) GetBillsReports(ctx context.Context, arg GetBillsReportsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBillsReports, arg.UserID, arg.Type)
	var sum_value int64
	err := row.Scan(&sum_value)
	return sum_value, err
}

const updateBill = `-- name: UpdateBill :one

UPDATE bills
SET title       = $2,
    type        = $3,
    description = $4,
    amount      = $5,
    date        = $6
WHERE id = $1
RETURNING id
`

type UpdateBillParams struct {
	ID          int32     `json:"id"`
	Title       string    `json:"title"`
	Type        string    `json:"type"`
	Description string    `json:"description"`
	Amount      string    `json:"amount"`
	Date        time.Time `json:"date"`
}

func (q *Queries) UpdateBill(ctx context.Context, arg UpdateBillParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, updateBill,
		arg.ID,
		arg.Title,
		arg.Type,
		arg.Description,
		arg.Amount,
		arg.Date,
	)
	var id int32
	err := row.Scan(&id)
	return id, err
}
